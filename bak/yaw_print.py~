import rclpy
from rclpy.node import Node
from nav_msgs.msg import Odometry
import numpy as np

class QuaternionPrinter(Node):
    def __init__(self):
        super().__init__('quaternion_printer')
        self.subscription = self.create_subscription(
            Odometry,
            '/odom',
            self.odom_callback,
            10)
        self.subscription  # prevent unused variable warning

    def euler_from_quaternion(self, x, y, z, w):
        """
        Convert a quaternion into euler angles (roll, pitch, yaw)
        roll is rotation around x in radians (counterclockwise)
        pitch is rotation around y in radians (counterclockwise)
        yaw is rotation around z in radians (counterclockwise)
        """
        t0 = +2.0 * (w * x + y * z)
        t1 = +1.0 - 2.0 * (x * x + y * y)
        roll_x = np.arctan2(t0, t1)
        
        t2 = +2.0 * (w * y - z * x)
        t2 = +1.0 if t2 > +1.0 else t2
        t2 = -1.0 if t2 < -1.0 else t2
        pitch_y = np.arcsin(t2)
        
        t3 = +2.0 * (w * z + x * y)
        t4 = +1.0 - 2.0 * (y * y + z * z)
        yaw_z = np.arctan2(t3, t4)
        
        return roll_x, pitch_y, yaw_z  # in radians

    def odom_callback(self, msg):
        quaternion = msg.pose.pose.orientation
        roll, pitch, yaw = self.euler_from_quaternion(quaternion.x, quaternion.y, quaternion.z, quaternion.w)
        self.get_logger().info('Yaw: %f' % yaw)

def main(args=None):
    rclpy.init(args=args)
    quaternion_printer = QuaternionPrinter()
    rclpy.spin(quaternion_printer)
    quaternion_printer.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
